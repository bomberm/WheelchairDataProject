#! /usr/bin/env python
#
# Support module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Feb 01, 2018 01:55:14 AM


import sys
import saveLocation
import paramiko
import base64

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1


from readTestFile import readFile
contents = readFile("test.test")
print contents
sshIP = str(contents['IP'])
sshPort = int(contents['port'])
sshUser = str(contents['User'])
sshPass = str(contents['Password'])
baseKey = b'AAAAB3NzaC1yc2EAAAADAQABAAABAQDThl92K8r7+3XlQHrbB3rOYU9RmfG2hlQU8eHSEByfVcTm0X5IIcwf3PsMR5zt79liVbwyW/XHwNClIG7b0VF+c7JX+K+BDffBg4xjbqi0IQwHXDlmi0LXcK2e/kH43Z1J1ZJACDSMCBH5jCDkuUREYYzlr5ff6h+pA3xomEuIR5pb7Gf3GuWu+8RUi5glmTVmU//qo4WNzz4sJvEWcBnc6aYBDlByhyRZ0koSA+SgV0JFy8mx40903h8NNrHfmO9fVKnxiha5DsWxlNcDfAizcYrv5Qgt1WSpsXXpSVB6kCRsb7aodND85NCAQw4o4gQGADeBwoJjrcgOZ5UxMv3p'
key = paramiko.RSAKey(data=base64.b64decode(baseKey))
client = paramiko.SSHClient()
client.get_host_keys().add(sshIP, 'ssh-rsa', key)
client.connect(sshIP, username=sshUser, password=sshPass)

def initializeConnection():
    from readTestFile import readFile
    contents = readFile("test.test")
    print contents
    sshIP = str(contents['IP'])
    sshPort = int(contents['port'])
    sshUser = str(contents['User'])
    sshPass = str(contents['Password'])
    baseKey = b'AAAAB3NzaC1yc2EAAAADAQABAAABAQDThl92K8r7+3XlQHrbB3rOYU9RmfG2hlQU8eHSEByfVcTm0X5IIcwf3PsMR5zt79liVbwyW/XHwNClIG7b0VF+c7JX+K+BDffBg4xjbqi0IQwHXDlmi0LXcK2e/kH43Z1J1ZJACDSMCBH5jCDkuUREYYzlr5ff6h+pA3xomEuIR5pb7Gf3GuWu+8RUi5glmTVmU//qo4WNzz4sJvEWcBnc6aYBDlByhyRZ0koSA+SgV0JFy8mx40903h8NNrHfmO9fVKnxiha5DsWxlNcDfAizcYrv5Qgt1WSpsXXpSVB6kCRsb7aodND85NCAQw4o4gQGADeBwoJjrcgOZ5UxMv3p'
    key = paramiko.RSAKey(data=base64.b64decode(baseKey))
    client = paramiko.SSHClient()
    client.get_host_keys().add(sshIP, 'ssh-rsa', key)
    client.connect(sshIP, username=sshUser, password=sshPass)
    stdin, stdout, stderr = client.exec_command('echo hello?')
    if("hello?" in stdout):
        w.connectionStatus.configure(text='''Connected to Wheelchair''')
        sys.stdout.flush()
        return 1
    else:
        w.connectionStatus.configure(text='''Connection Failed''')
        sys.stdout.flush()
        return 0


def record():
    print('interface_support.record')
    sys.stdout.flush()
    if(initializeConnection()):
        if(w.recordingStatus):
            w.recordingStatus = 0
            w.but38.configure(text='''Record Bag''')
        else:
            w.recordingStatus = 1
            #TODO PULL ID from interface
            ID = w.idEntry.get()
            print ID
            location = saveLocation.startSave(ID, contents)
            w.but38.configure(text='''Stop''')



def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import interface
    interface.vp_start_gui()
